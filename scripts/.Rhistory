#run functions
#get data
path <- '/Users/adarekar/Documents/College/Senior/ST 495/Project/'
device_data <- load_data(paste(path, 'DEVICE2016.txt', sep = ""), delim = '|', col_names = TRUE)
library(tidyverse)
#load a dataset
load_data <- function(filepath, delim = ",", col_names = TRUE) {
data <- read_delim(filepath, delim = delim, col_names = col_names)
return(data)
}
#run functions
#get data
path <- '/Users/adarekar/Documents/College/Senior/ST 495/Project/'
device_data <- load_data(paste(path, 'DEVICE2016.txt', sep = ""), delim = '|', col_names = TRUE)
patient_data <- load_data(paste(path, 'patient2016.csv', sep = ""))
mdr_data <- load_data(paste(path, 'mdr2016.csv', sep = ""))
patient_problem <- load_data(paste(path, 'patientproblemcode.txt', sep =""), delim = '|', col_names = TRUE)
foi_dev_problem <- load_data(paste(path, 'foidevproblem.txt', sep = ""), delim = '|', col_names = c('MDR_REPORT_KEY', 'DEVICE_PROBLEM_CODE'))
device_prob_code <- load_data(paste(path, 'deviceproblemcodes.csv', sep = ""), col_names = c('DEVICE_PROBLEM_CODE', 'PROBLEM_DESCRIPTION'))
patient_prob_code <- load_data(paste(path, 'patientproblemcodes.csv', sep = ""), col_names = c('PATIENT_PROBLEM_CODE', 'PROBLEM_DESCRIPTION'))
#convert mdr report key variable in patient problem code to integer
patient_problem$MDR_REPORT_KEY <- as.numeric(patient_problem$MDR_REPORT_KEY)
#drop columns that are not needed
data_with_variables_of_interest <- select_variables_of_interest(device_data, patient_data, mdr_data, patient_problem)
#only keep variables of interest
select_variables_of_interest <- function(device_data, patient_data, mdr_data,
patient_problem) {
device_data <- select(device_data, MDR_REPORT_KEY, MANUFACTURER_D_NAME,DEVICE_REPORT_PRODUCT_CODE,
COMBINATION_PRODUCT_FLAG, BRAND_NAME)
patient_data <- select(patient_data, MDR_REPORT_KEY, DATE_RECEIVED)
mdr_data <- select(mdr_data, MDR_REPORT_KEY, REPORT_SOURCE_CODE, DATE_RECEIVED, DATE_OF_EVENT, REPORTER_OCCUPATION_CODE,
EVENT_TYPE, MANUFACTURER_NAME, REPORTER_COUNTRY_CODE, PMA_PMN_NUM)
patient_problem <- select(patient_problem, MDR_REPORT_KEY, PROBLEM_CODE)
return(list(device_data = device_data,
patient_data = patient_data,
mdr_data = mdr_data,
patient_problem = patient_problem))
}
#read in libraries
library(tidyverse)
#read in datasets
path <- '../data/raw_data/'
device_data <- read_delim(paste(path, 'DEVICE2016.txt', sep = ""), delim = '|', col_names = TRUE)
install.packages("here")
here::here()
here("data")
here("rawdata")
here::dr_here()
install.packages("rstudioapi")
install.packages("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
get_wd()
getwd()
#read in datasets
path <- '../data/raw_data/'
device_data <- read_delim(paste(path, 'DEVICE2016.txt', sep = ""), delim = '|', col_names = TRUE)
#read in libraries
library(tidyverse)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#read in datasets
path <- '../data/raw_data/'
#read in libraries
library(tidyverse)
library(rstudioapi)
#change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#read in datasets
path <- '../data/raw_data/'
device_data <- read_delim(paste(path, 'DEVICE2016.txt', sep = ""), delim = '|', col_names = TRUE)
patient_data <- read_csv(paste(path, 'patient2016.csv', sep = ""))
mdr_data <- read_csv(paste(path, 'mdr2016.csv', sep = ""))
patient_problem <- read_delim(paste(path, 'patientproblemcode.txt', sep =""), delim = '|', col_names = TRUE)
foi_dev_problem <- read_delim(paste(path, 'foidevproblem.txt', sep = ""), delim = '|', col_names = c('MDR_REPORT_KEY', 'DEVICE_PROBLEM_CODE'))
device_prob_code <- read_csv(paste(path, 'deviceproblemcodes.csv', sep = ""), col_names = c('DEVICE_PROBLEM_CODE', 'PROBLEM_DESCRIPTION'))
patient_prob_code <- read_csv(paste(path, 'patientproblemcodes.csv', sep = ""), col_names = c('PATIENT_PROBLEM_CODE', 'PROBLEM_DESCRIPTION'))
#convert mdr report key variable in patient problem code to integer
patient_problem$MDR_REPORT_KEY <- as.numeric(patient_problem$MDR_REPORT_KEY)
#only keep variables of interest
device_data <- select(device_data, MDR_REPORT_KEY, MANUFACTURER_D_NAME,DEVICE_REPORT_PRODUCT_CODE,
COMBINATION_PRODUCT_FLAG, BRAND_NAME)
patient_data <- select(patient_data, MDR_REPORT_KEY, DATE_RECEIVED)
mdr_data <- select(mdr_data, MDR_REPORT_KEY, REPORT_SOURCE_CODE, DATE_RECEIVED, DATE_OF_EVENT, REPORTER_OCCUPATION_CODE,
EVENT_TYPE, MANUFACTURER_NAME, REPORTER_COUNTRY_CODE, PMA_PMN_NUM)
patient_problem <- select(patient_problem, MDR_REPORT_KEY, PROBLEM_CODE)
#merge datasets using mdr report key and date_received variable
merge_data <- merge(mdr_data, patient_data, by = c("MDR_REPORT_KEY", "DATE_RECEIVED"))
merge_data <- merge(merge_data, device_data, by = c("MDR_REPORT_KEY"))
merge_data <- merge(merge_data, foi_dev_problem,  by = c("MDR_REPORT_KEY"))
merge_data <- merge(merge_data, patient_problem, by = c("MDR_REPORT_KEY"))
#drop MANUFACTURER_NAME
merge_data <- select(merge_data, -MANUFACTURER_NAME)
#match patient and device codes with their description
p_prob_descrip <- rep(NA, length(merge_data$PROBLEM_CODE))
d_prob_descrip <- rep(NA, length(merge_data$DEVICE_PROBLEM_CODE))
p_code <- merge_data$PROBLEM_CODE
d_code <- merge_data$DEVICE_PROBLEM_CODE
for (i in 1:length(p_code)) {
index_d <- which(device_prob_code$DEVICE_PROBLEM_CODE == d_code[i])
d_prob_descrip[i] <- device_prob_code$PROBLEM_DESCRIPTION[index_d]
index_p <- which(patient_prob_code$PATIENT_PROBLEM_CODE == p_code[i])
p_prob_descrip[i] <- patient_prob_code$PROBLEM_DESCRIPTION[index_p]
}
#append descriptions to merge_data
merge_data$PATIENT_PROBLEM_DESCRIPTION <- p_prob_descrip
merge_data$DEVICE_PROBLEM_DESCRIPTION <- d_prob_descrip
#libraries
library(tidyverse)
#libraries
library(tidyverse)
library(rstudioapi)
#change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#read in datasets
path <- '../data/processed_data/'
data2016 <- read_csv(paste(path, 'cleandata2016.csv', sep = ""))
data2017 <- read_csv(paste(path, 'cleandata2017.csv', sep = ""))
data2018 <- read_csv(paste(path, 'cleandata2018.csv', sep = ""))
data2019 <- read_csv(paste(path, 'cleandata2019.csv', sep = ""))
#rename variables
data2016 <- rename(data2016, PATIENT_PROBLEM_CODE = PROBLEM_CODE)
data2019 <- rename(data2019, PATIENT_PROBLEM_DESCRIPTION = PATIENT_PROBLEM,
DEVICE_PROBLEM_DESCRIPTION = DEVICE_PROBLEM)
data2017 <- rename(data2017, PATIENT_PROBLEM_CODE = PROBLEM_CODE)
data2018 <- rename(data2018, PATIENT_PROBLEM_CODE = PROBLEM_CODE)
#get rid of first variable in data2018
data2018 <- data2018[,-c(1)]
#more data cleaning
data2017$DATE_OF_EVENT <- format(as.Date(as.character(data2017$DATE_OF_EVENT)), format = "%m/%d/%Y")
data2017$DATE_RECEIVED <- format(as.Date(as.character(data2017$DATE_RECEIVED)), format = "%m/%d/%Y")
data2019$DATE_OF_EVENT <- format(as.Date(as.character(data2019$DATE_OF_EVENT)), format = "%m/%d/%Y")
data2019$DATE_RECEIVED <- format(as.Date(as.character(data2019$DATE_RECEIVED)), format = "%m/%d/%Y")
#vertical merge
cleandata <- rbind(data2016, data2017, data2018, data2019)
#libraries
library(tidyverse)
library(ranger)
library(MASS)
library(pROC)
#libraries
library(tidyverse)
library(ranger)
library(MASS)
library(pROC)
library(rstudioapi)
#change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#read in data
path <- '../data/processed_data/'
data <- read_csv(paste(path, 'cleaned-maude-2016-2019.csv', sep = ""))
#preprocessing
data <- as.data.frame(data)
data <- na.omit(data)
data <- subset(data, select <- -c(...1, PATIENT_PROBLEM_DESCRIPTION, DEVICE_PROBLEM_DESCRIPTION, MDR_REPORT_KEY, DEVICE_PROBLEM_CODE, PATIENT_PROBLEM_CODE, REPORTER_OCCUPATION_CODE, DEVICE_REPORT_PRODUCT_CODE, REPORTER_COUNTRY_CODE))
n<-nrow(data)
train.prop <-0.7
train.size <-ceiling(n*train.prop) #integer above number
data <- subset(data, select <- -c(...1, PATIENT_PROBLEM_DESCRIPTION, DEVICE_PROBLEM_DESCRIPTION, MDR_REPORT_KEY, DEVICE_PROBLEM_CODE, PATIENT_PROBLEM_CODE, REPORTER_OCCUPATION_CODE, DEVICE_REPORT_PRODUCT_CODE, REPORTER_COUNTRY_CODE))
View(data)
columns(data)
column_names(data)
colnames(Data)
colnames(dat)
colnames(data)
#preprocessing
data <- as.data.frame(data)
data <- na.omit(data)
data <- subset(data, select = -c(...1, PATIENT_PROBLEM_DESCRIPTION, DEVICE_PROBLEM_DESCRIPTION, MDR_REPORT_KEY, DEVICE_PROBLEM_CODE, PATIENT_PROBLEM_CODE, REPORTER_OCCUPATION_CODE, DEVICE_REPORT_PRODUCT_CODE, REPORTER_COUNTRY_CODE))
data$EVENT_TYPE <- as.factor(data$EVENT_TYPE)
#cross validation 70%/30% split
K<-5
n<-nrow(data)
train.prop <-0.7
train.size <-ceiling(n*train.prop) #integer above number
rf1.err.cv <-rep(NA, K)
rf2.err.cv <-rep(NA, K)
rf3.err.cv <-rep(NA, K)
for (i in 1:K) {
set.seed(234)
indices <- sample(n, train.size)
train.data <- data[indices,]
test.data <- data[-indices,]
tree1 <- ranger(EVENT_TYPE~., data = train.data, mtry = 3, num.trees = 50, importance = "impurity")
tree2 <- ranger(EVENT_TYPE~., data = train.data, mtry = 3, num.trees = 100, importance = "impurity")
tree3 <- ranger(EVENT_TYPE~., data = train.data, mtry = 3, num.trees = 200, importance = "impurity")
pred.tree1 <- predict(tree1, data = subset(test.data, select = -c(EVENT_TYPE)))
pred.tree2 <- predict(tree2, data = subset(test.data, select = -c(EVENT_TYPE)))
pred.tree3 <- predict(tree3, data = subset(test.data, select = -c(EVENT_TYPE)))
rf1.err.cv[i] <- sum(pred.tree1$predictions != test.data$EVENT_TYPE)/nrow(test.data)
rf2.err.cv[i] <- sum(pred.tree2$predictions != test.data$EVENT_TYPE)/nrow(test.data)
rf3.err.cv[i] <- sum(pred.tree3$predictions != test.data$EVENT_TYPE)/nrow(test.data)
}
mean(rf1.err.cv)
mean(rf2.err.cv)
mean(rf3.err.cv)
#go with tree 3 (mtry = 3, num.trees = 200) with 70%/30% split
set.seed(234)
train <- sample(n, ceiling(0.7*n))
train_data <- data[train,]
test <- data[-train,]
#training and evaluating tree
tree <- ranger(EVENT_TYPE~., data = train_data, mtry = 3, num.trees = 200, importance = "impurity")
pred.tree <- predict(tree, data = subset(test, select = -c(EVENT_TYPE)))
table(test$EVENT_TYPE, pred.tree$predictions)
sum(pred.tree$predictions != test$EVENT_TYPE)/nrow(test)
#roc curve
roc_score<-multiclass.roc(pred.tree$predictions, as.numeric(test$EVENT_TYPE))
plot.roc(roc_score$rocs[[1]], col = 'green',
print.auc=T,
legacy.axes = T)
plot.roc(roc_score$rocs[[2]],
add=T, col = 'red',
print.auc = T,
legacy.axes = T,
print.auc.adj = c(0,3))
plot.roc(roc_score$rocs[[3]],add=T, col = 'blue',
print.auc=T,
legacy.axes = T,
print.auc.adj = c(0,5))
legend('bottomright',
legend = c('Death-Injury',
'Death-Malfunction',
'Injury-Malfunction'),
col=c('green', 'red', 'blue'),lwd=2)
#distribution of response to show uneven distribution
table(data$EVENT_TYPE)
